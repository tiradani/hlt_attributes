#!/usr/bin/env python

import classad
import htcondor
import sys
import traceback

CONDOR_GLIDEIN_ATTRS = "/etc/condor/config.d/80-glideinwms-attrs-generated"
CMS_GLOBAL_POOL = ""
CMS_HLT_ENTRY_NAME = ""

class HTCondorCollector(object):
    def __init__(self, collector_address):
        if len(collector_address) <= 0: raise Exception("Invalid Collector Address")
        self.address = collector_address
        self.collector = htcondor.Collector(collector_address)

    def query(self, constraint="", adType=htcondor.AdTypes.Any):
        results = self.collector.query(adType, constraint)
        return results

class HTCondorConfigFile(object):
    def __init__(self, filename):
        if len(filename) <= 0: raise Exception("Invalid file name")
        self.filename = filename
        self.attributes = {}
        self.do_not_quote = [ 'START', ]

    def __str__(self):
        return "".join(self.format())

    def load(self):
        with open(self.filename) as fd:
            lines = fd.readlines()
            for line in lines:
                key, value = line.split("=")
                self.attributes[key.strip()] = value.strip()

    def format(self):
        STARTD_ATTRS = []
        lines = []
        lines.append("# This file is AUTO-GENERATED and will be overwritten.\n")
        for key, value in self.attributes.items():
            try:
                if  not (key in self.do_not_quote): int(value)
                lines.append("%s = %s\n" % (key, value))
            except:
                lines.append("%s = \"%s\"\n" % (key, value))
            if not (key == 'START'): STARTD_ATTRS.append(key)
        # set the config so that all the downloaded attributes are advertised 
        # (with the exception of the START expression) 
        lines.append("STARTD_ATTRS = $(STARTD_ATTRS) %s\n" % " ".join(STARTD_ATTRS))
        return lines

    def write(self):
        lines = self.format()
        with open(self.filename, "w") as fd:
            fd.writelines(lines)

    def get_attribute(self, attr_name):
        return self.attributes[attr_name]

    def set_attribute(self, attr_name, attr_value):
        self.attributes[attr_name] = attr_value

def main(args):
    try:
        config_file = HTCondorConfigFile(CONDOR_GLIDEIN_ATTRS)
        constraint = "(glideinmytype==\"glideresource\") && (Name==%s)" % \
            classad.quote(CMS_HLT_ENTRY_NAME)
        collector = HTCondorCollector(CMS_GLOBAL_POOL)
        ads = collector.query(constraint=constraint)
        key_list = []
        # We expect only one ad.  If there are more then one, we ignore all but
        # the very first ad.
        for key, value in ads[0].items():
            if key.startswith("GLIDEIN_"):
                config_file.set_attribute(key, value)
                key_list.append(key)
# AT (April 28, 2015)
# For the moment we are commenting this out.  It appears that the START 
# expression given in the Factory collector does not work as expected.
#  
# Keeping this code in place, mainly so that I don't forget which classad 
# attribute is supposed to contain the START expression.  If we ever want to 
# revist we will have to get the glideinWMS team to fix this attribute.
#
#            elif key == "GlideClientMatchingInternalPythonExpr":
#                start_value = "$(START) && %s" % value
#                config_file.set_attribute("START", start_value)

        # Hardcode a simple START expression for now.
        start_value = "ifthenelse(DESIRED_Sites isnt undefined, " \
                      "stringListMember(GLIDEIN_CMSSite,DESIRED_Sites), "\
                      "undefined)"
        config_file.set_attribute("START", start_value)

        config_file.write()
        # No Errors!  Return 0
        return 0
    except:
        if len(args) > 1:
            if args[1] == '-v':
                print "Error obtaining custom attributes"
                traceback.print_exc()
        return -1

if __name__ == "__main__":
    sys.exit(main(sys.argv))

